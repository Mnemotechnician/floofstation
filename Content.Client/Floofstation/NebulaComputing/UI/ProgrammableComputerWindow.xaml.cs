using Content.Client.UserInterface.Controls;
using Content.Shared.FloofStation.NebulaComputing.UI;
using Content.Shared.FloofStation.NebulaComputing.UI.Events;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Shared.Prototypes;

namespace Content.Client.Floofstation.NebulaComputing.UI;


[GenerateTypedNameReferences]
public sealed partial class ProgrammableComputerWindow : FancyWindow
{
    public event Action<PCActionRequest.Action>? OnAction;

    private readonly IEntityManager _entityManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IPrototypeManager _prototypes;
    private readonly IResourceCache _cache;

    public ProgrammableComputerWindow()
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        _entityManager = dependencies.Resolve<IEntityManager>();
        _spriteSystem = _entityManager.System<SpriteSystem>();
        _prototypes = dependencies.Resolve<IPrototypeManager>();
        _cache = dependencies.Resolve<IResourceCache>();

        TabSelector.SetTabTitle(0, "Console");
        TabSelector.SetTabTitle(1, "Assembler");
        TabSelector.SetTabTitle(2, "Info");

        RunButton.OnPressed += _ => OnAction?.Invoke(PCActionRequest.Action.Start);
        StopButton.OnPressed += _ => OnAction?.Invoke(PCActionRequest.Action.Reset);
        RestartButton.OnPressed += _ => OnAction?.Invoke(PCActionRequest.Action.Restart);
    }


    public void Populate(ProgrammableComputerBUIState msg)
    {
        RestartButton.Disabled = StopButton.Disabled = !msg.IsRunning;
        RunButton.Disabled = msg.IsRunning;
    }
}
