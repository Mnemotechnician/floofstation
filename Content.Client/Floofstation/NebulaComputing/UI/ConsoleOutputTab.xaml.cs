using System.Text;
using Content.Client.Resources;
using Content.Shared.FloofStation.NebulaComputing.UI;
using Content.Shared.FloofStation.NebulaComputing.Util;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;


namespace Content.Client.Floofstation.NebulaComputing.UI;


[GenerateTypedNameReferences]
public sealed partial class ConsoleOutputTab : Control
{
    [Dependency] private readonly IResourceCache _cache = default!;

    public int Columns = 120;
    public int Rows = 30;
    public CircularQueue<string> ProcessedOutput { get; private set; } = new(0);

    public ConsoleOutputTab()
    {
        RobustXamlLoader.Load(this);

        var font = _cache.GetFont("/Fonts/Boxfont-round/Boxfont Round.ttf", 13);
        Output.FontOverride = font;

        var lh = font.GetLineHeight(1) + 0.1f;
        var cw = (font.GetCharMetrics(new('A'), 1, true)?.Advance ?? 5) + 0.1f;

        Output.MinWidth = Columns * cw;
        Output.MinHeight = Rows * lh;
    }

    public void Populate(ProgrammableComputerBUIState msg)
    {
        SetTerminalOutput(msg.ConsoleOutput);
    }

    public void SetTerminalOutput(IEnumerable<char> output)
    {
        var rows = new CircularQueue<string>(Rows);
        var sb = new StringBuilder(Columns);

        void NewLine()
        {
            rows.Enqueue(sb.Length == 0 ? string.Empty : sb.ToString());
            sb.Clear();
        }

        foreach (var c in output)
        {
            switch (c)
            {
                case '\n':
                case '\r':
                    NewLine();
                    break;

                case '\t':
                    sb.Append("    ");
                    break;

                default:
                    sb.Append(c);
                    break;
            }

            if (sb.Length >= Columns)
                NewLine();
        }

        ProcessedOutput = rows;
        Output.Text = string.Join('\n', rows);
    }
}

