using System.Linq;
using Content.Client.Resources;
using Content.Client.Stylesheets;
using Content.Shared._Floof.NebulaComputing.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;


namespace Content.Client._Floof.NebulaComputing.UI;


[GenerateTypedNameReferences]
public sealed partial class AssemblerTab : Control
{
    [Dependency] private readonly IResourceCache _cache = default!;
    [Dependency] private readonly IStylesheetManager _stylesheet = default!;

    public event Action<string, bool>? OnRunRequested;

    private bool _codeChangedSinceLastState = false;
    private (int, int) _lastShownSelection = new(-1, -1);

    public AssemblerTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        RunButton.OnPressed += _ => RequestRun();
        ClearOutputButton.OnPressed += _ => ClearOutput();

        var font = _cache.GetFont("/EngineFonts/NotoSans/NotoSansMono-Regular.ttf", 12);
        // God I fucking hate stylesheets. But it's the only way to change the font of a TextEdit.
        var monospaceStylesheet = new Stylesheet(
            _stylesheet.SheetNano.Rules.AsEnumerable()
            .Append(new(new SelectorElement(typeof(TextEdit), null, null, null), [new("font", font)]))
            .ToList());

        CodeEdit.OnTextChanged += _ => _codeChangedSinceLastState = true;
        CodeEdit.Placeholder = new Rope.Leaf("Enter code here");
        CodeEdit.Stylesheet = monospaceStylesheet;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        // Update the cursor position text only if it has changed
        var selectionStart = CodeEdit.SelectionLower.Index;
        var selectionEnd = CodeEdit.SelectionUpper.Index;
        if (!VisibleInTree || _lastShownSelection.Item1 == selectionStart && _lastShownSelection.Item2 == selectionEnd)
            return;

        _lastShownSelection = (selectionStart, selectionEnd);

        var text = Rope.Collapse(CodeEdit.TextRope); // Hopefully this isn't too expensive...
        (int line, int col) GetLineCol(int index)
        {
            if (index >= text.Length)
                index = text.Length - 1;
            if (index < 0)
                return (-1, -1);

            int line = 1, col = 0;
            for (int i = 0; i < index; i++)
            {
                col++;
                if (text[i] == '\n')
                {
                    line++;
                    col = 0;
                }
            }
            return (line, col);
        }

        string selectionText;
        var (startLine, startCol) = GetLineCol(selectionStart);
        if (selectionStart == selectionEnd)
            selectionText = $"({startLine}:{startCol})";
        else
        {
            var (endLine, endCol) = GetLineCol(selectionEnd);
            var length = CodeEdit.SelectionLength;
            selectionText = $"({startLine}:{startCol}-{endLine}:{endCol} ~ {length} chars)";
        }

        CursorStats.Text = $"Cursor: {selectionText}";
    }

    public void Populate(ProgrammableComputerBUIState msg)
    {
        RunButton.Disabled = msg.IsActivelyAssembling;

        if (msg.LastRunAssembly is { } assembly && !_codeChangedSinceLastState)
            CodeEdit.TextRope = new Rope.Leaf(assembly);
    }

    public void RequestRun()
    {
        var code = Rope.Collapse(CodeEdit.TextRope).Trim();
        if (code.Length == 0)
        {
            PrintOutput("Please enter some code before requesting a run.");
            return;
        }

        OnRunRequested?.Invoke(code, true);
        PrintOutput("Compilation has started. Check the console for more info.");
        _codeChangedSinceLastState = false;
    }

    public void ClearOutput()
    {
        Output.Text = "";
    }

    public void PrintOutput(string output)
    {
        Output.Text = output;
    }
}

